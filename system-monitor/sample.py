import psutil
import GPUtil
from tabulate import tabulate
import argparse

def get_cpu_usage():
    return psutil.cpu_percent(interval=1)

def get_memory_usage():
    memory = psutil.virtual_memory()
    return {
        '–í—Å–µ–≥–æ üíæ': f'{memory.total / (1024 ** 3):.2f} –ì–ë',
        '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è üîí': f'{memory.used / (1024 ** 3):.2f} –ì–ë',
        '–°–≤–æ–±–æ–¥–Ω–æ üîì': f'{memory.available / (1024 ** 3):.2f} –ì–ë',
        '–ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è üìä': f'{memory.percent}%'
    }

def get_disk_usage():
    disk = psutil.disk_usage('/')
    return {
        '–í—Å–µ–≥–æ üíø': f'{disk.total / (1024 ** 3):.2f} –ì–ë',
        '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è üìÇ': f'{disk.used / (1024 ** 3):.2f} –ì–ë',
        '–°–≤–æ–±–æ–¥–Ω–æ üóÑÔ∏è': f'{disk.free / (1024 ** 3):.2f} –ì–ë',
        '–ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è üìâ': f'{disk.percent}%'
    }

def get_disk_io():
    disk_io = psutil.disk_io_counters()
    return {
        '–ß—Ç–µ–Ω–∏–µ (–±–∞–π—Ç) üìÑ': disk_io.read_bytes,
        '–ó–∞–ø–∏—Å—å (–±–∞–π—Ç) üíæ': disk_io.write_bytes,
        '–ß—Ç–µ–Ω–∏–µ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ) üîç': disk_io.read_count,
        '–ó–∞–ø–∏—Å—å (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ) üñãÔ∏è': disk_io.write_count
    }

def get_network_usage():
    net_io = psutil.net_io_counters()
    return {
        '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–±–∞–π—Ç) üì§': net_io.bytes_sent,
        '–ü–æ–ª—É—á–µ–Ω–æ (–±–∞–π—Ç) üì•': net_io.bytes_recv,
        '–ü–∞–∫–µ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã üì¶': net_io.packets_sent,
        '–ü–∞–∫–µ—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã üì´': net_io.packets_recv
    }

def get_gpu_usage():
    try:
        gpus = GPUtil.getGPUs()
        gpu_list = []
        for gpu in gpus:
            gpu_list.append([
                gpu.id,
                gpu.name,
                f"{gpu.load * 100:.2f}%",
                f"{gpu.memoryUtil * 100:.2f}%",
                f"{gpu.temperature} ¬∞C üå°Ô∏è"
            ])
        return gpu_list
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ GPU: {e}")
        return []

def get_top_processes(n=10):
    processes = []
    for proc in sorted(psutil.process_iter(['pid', 'name', 'cpu_percent', 'memory_percent']),
                       key=lambda x: x.info['cpu_percent'],
                       reverse=True)[:n]:
        try:
            processes.append([
                proc.info['pid'],
                proc.info['name'],
                f"{proc.info['cpu_percent']:.2f}%",
                f"{proc.info['memory_percent']:.2f}%"
            ])
        except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
            pass

    return processes

def log_to_file(filename, data):
    with open(filename, 'a') as file:
        file.write(data + '\n')

def main(top_n, log_file):
    print("=== –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã üñ•Ô∏è ===")

    cpu_usage = get_cpu_usage()
    print(f"\n–ó–∞–≥—Ä—É–∑–∫–∞ CPU üíª: {cpu_usage}%")

    print("\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏:")
    memory_usage = get_memory_usage()
    for key, value in memory_usage.items():
        print(f"{key}: {value}")

    print("\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞:")
    disk_usage = get_disk_usage()
    for key, value in disk_usage.items():
        print(f"{key}: {value}")

    print("\n–û–ø–µ—Ä–∞—Ü–∏–∏ —Å –¥–∏—Å–∫–æ–º:")
    disk_io = get_disk_io()
    for key, value in disk_io.items():
        print(f"{key}: {value}")

    print("\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏:")
    network_usage = get_network_usage()
    for key, value in network_usage.items():
        print(f"{key}: {value}")

    print("\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ GPU:")
    gpu_usage = get_gpu_usage()
    if gpu_usage:
        print(tabulate(gpu_usage,
                       headers=['ID', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–ó–∞–≥—Ä—É–∑–∫–∞', '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏', '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞'],
                       tablefmt='grid'))
    else:
        print("GPU –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. üö´")

    print("\n–¢–æ–ø –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é CPU üèÜ:")
    top_processes = get_top_processes(top_n)
    print(tabulate(top_processes,
                   headers=['PID', '–ù–∞–∑–≤–∞–Ω–∏–µ', 'CPU %', '–ü–∞–º—è—Ç—å %'],
                   tablefmt='grid'))

    if log_file:
        log_data = (f"CPU Usage: {cpu_usage}%\n"
                    f"Memory Usage: {memory_usage}\n"
                    f"Disk Usage: {disk_usage}\n"
                    f"Disk IO: {disk_io}\n"
                    f"Network Usage: {network_usage}\n"
                    f"GPU Usage:\n{tabulate(gpu_usage, headers=['ID', 'Name', 'Load', 'Memory Usage', 'Temperature'], tablefmt='plain')}\n"
                    f"Top Processes:\n{tabulate(top_processes, headers=['PID', 'Name', 'CPU %', 'Memory %'], tablefmt='plain')}\n")
        log_to_file(log_file, log_data)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã.')
    parser.add_argument('--top', type=int, default=10, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–ø-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è')
    parser.add_argument('--log', type=str, default=None, help='–§–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤')
    args = parser.parse_args()

    main(args.top, args.log)
