import psutil
import GPUtil
from tabulate import tabulate
import flet as ft
import threading
import time
import matplotlib.pyplot as plt
from io import BytesIO
import base64

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
def get_cpu_usage():
    return psutil.cpu_percent(interval=1)

def get_memory_usage():
    memory = psutil.virtual_memory()
    return {
        '–í—Å–µ–≥–æ üíæ': f'{memory.total / (1024 ** 3):.2f} –ì–ë',
        '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è üîí': f'{memory.used / (1024 ** 3):.2f} –ì–ë',
        '–°–≤–æ–±–æ–¥–Ω–æ üîì': f'{memory.available / (1024 ** 3):.2f} –ì–ë',
        '–ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è üìä': f'{memory.percent}%'
    }

def get_disk_usage():
    disk_info = []
    partitions = psutil.disk_partitions()
    for partition in partitions:
        try:
            usage = psutil.disk_usage(partition.mountpoint)
            disk_info.append([
                partition.device,
                f'{usage.total / (1024 ** 3):.2f} –ì–ë',
                f'{usage.used / (1024 ** 3):.2f} –ì–ë',
                f'{usage.free / (1024 ** 3):.2f} –ì–ë',
                f'{usage.percent}%'
            ])
        except PermissionError:
            continue
    return disk_info

def get_disk_io():
    disk_io = psutil.disk_io_counters()
    return {
        '–ß—Ç–µ–Ω–∏–µ (–±–∞–π—Ç) üìÑ': disk_io.read_bytes,
        '–ó–∞–ø–∏—Å—å (–±–∞–π—Ç) üíæ': disk_io.write_bytes,
        '–ß—Ç–µ–Ω–∏–µ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ) üîç': disk_io.read_count,
        '–ó–∞–ø–∏—Å—å (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ) üñãÔ∏è': disk_io.write_count
    }

def get_network_usage():
    net_io = psutil.net_io_counters()
    return {
        '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–±–∞–π—Ç) üì§': net_io.bytes_sent,
        '–ü–æ–ª—É—á–µ–Ω–æ (–±–∞–π—Ç) üì•': net_io.bytes_recv,
        '–ü–∞–∫–µ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã üì¶': net_io.packets_sent,
        '–ü–∞–∫–µ—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã üì´': net_io.packets_recv
    }

def get_gpu_usage():
    try:
        gpus = GPUtil.getGPUs()
        gpu_list = []
        for gpu in gpus:
            gpu_list.append([
                gpu.id,
                gpu.name,
                f"{gpu.load * 100:.2f}%",
                f"{gpu.memoryUtil * 100:.2f}%",
                f"{gpu.temperature} ¬∞C üå°Ô∏è"
            ])
        return gpu_list
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ GPU: {e}")
        return []

def get_top_processes(n=20):
    processes = []
    for proc in sorted(psutil.process_iter(['pid', 'name', 'cpu_percent', 'memory_percent']),
                       key=lambda x: x.info['cpu_percent'],
                       reverse=True)[:n]:
        try:
            processes.append([
                proc.info['pid'],
                proc.info['name'],
                f"{proc.info['cpu_percent']:.2f}%",
                f"{proc.info['memory_percent']:.2f}%"
            ])
        except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
            pass
    return processes

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
def plot_metrics(cpu_data, memory_data):
    plt.switch_backend('Agg')  # Use a non-GUI backend
    fig, ax = plt.subplots(2, 1, figsize=(10, 8))

    # –ì—Ä–∞—Ñ–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è CPU
    ax[0].plot(cpu_data, label="CPU Usage %", color="blue")
    ax[0].set_title("CPU Usage Over Time")
    ax[0].set_xlabel("Time (s)")
    ax[0].set_ylabel("Usage (%)")
    ax[0].legend()

    # –ì—Ä–∞—Ñ–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
    ax[1].plot(memory_data, label="Memory Usage %", color="orange")
    ax[1].set_title("Memory Usage Over Time")
    ax[1].set_xlabel("Time (s)")
    ax[1].set_ylabel("Usage (%)")
    ax[1].legend()

    plt.tight_layout()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ –±—É—Ñ–µ—Ä
    buf = BytesIO()
    plt.savefig(buf, format="png")
    buf.seek(0)
    return buf

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Flet
def main(page: ft.Page):
    page.title = "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã üñ•Ô∏è"
    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER
    page.vertical_alignment = ft.MainAxisAlignment.START
    page.padding = 20
    page.scroll = ft.ScrollMode.AUTO

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –º–µ—Ç—Ä–∏–∫
    cpu_card = ft.Card(
        content=ft.Container(
            content=ft.Column(
                [
                    ft.Text("–ó–∞–≥—Ä—É–∑–∫–∞ CPU üíª", style="headlineSmall"),
                    ft.Text("", style="bodyMedium", color=ft.colors.BLUE_GREY)
                ],
                alignment=ft.MainAxisAlignment.CENTER,
                spacing=5
            ),
            padding=10
        )
    )

    memory_card = ft.Card(
        content=ft.Container(
            content=ft.Column(
                [
                    ft.Text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ üíæ", style="headlineSmall"),
                    ft.Text("", style="bodyMedium", color=ft.colors.BLUE_GREY)
                ],
                alignment=ft.MainAxisAlignment.CENTER,
                spacing=5
            ),
            padding=10
        )
    )

    disk_card = ft.Card(
        content=ft.Container(
            content=ft.Column(
                [
                    ft.Text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞ üíø", style="headlineSmall"),
                    ft.Text("", style="bodyMedium", color=ft.colors.BLUE_GREY)
                ],
                alignment=ft.MainAxisAlignment.CENTER,
                spacing=5
            ),
            padding=10
        )
    )

    disk_io_card = ft.Card(
        content=ft.Container(
            content=ft.Column(
                [
                    ft.Text("–î–∏—Å–∫ I/O üìÑ", style="headlineSmall"),
                    ft.Text("", style="bodyMedium", color=ft.colors.BLUE_GREY)
                ],
                alignment=ft.MainAxisAlignment.CENTER,
                spacing=5
            ),
            padding=10
        )
    )

    network_card = ft.Card(
        content=ft.Container(
            content=ft.Column(
                [
                    ft.Text("–°–µ—Ç—å üåê", style="headlineSmall"),
                    ft.Text("", style="bodyMedium", color=ft.colors.BLUE_GREY)
                ],
                alignment=ft.MainAxisAlignment.CENTER,
                spacing=5
            ),
            padding=10
        )
    )

    gpu_card = ft.Card(
        content=ft.Container(
            content=ft.Column(
                [
                    ft.Text("GPU üéÆ", style="headlineSmall"),
                    ft.Text("", style="bodyMedium", color=ft.colors.BLUE_GREY)
                ],
                alignment=ft.MainAxisAlignment.CENTER,
                spacing=5
            ),
            padding=10
        )
    )

    processes_card = ft.Card(
        content=ft.Container(
            content=ft.Column(
                [
                    ft.Text("–¢–æ–ø –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ üîù", style="headlineSmall"),
                    ft.Text("", style="bodyMedium", color=ft.colors.BLUE_GREY)
                ],
                alignment=ft.MainAxisAlignment.CENTER,
                spacing=5
            ),
            padding=10
        )
    )

    graph_card = ft.Card(
        content=ft.Container(
            content=ft.Column(
                [
                    ft.Text("–ì—Ä–∞—Ñ–∏–∫–∏ üìà", style="headlineSmall"),
                    ft.Image(src="", width=600, height=400)
                ],
                alignment=ft.MainAxisAlignment.CENTER,
                spacing=5
            ),
            padding=10
        )
    )

    theme_dropdown = ft.Dropdown(
        options=[
            ft.dropdown.Option("–°–≤–µ—Ç–ª–∞—è"),
            ft.dropdown.Option("–¢–µ–º–Ω–∞—è"),
            ft.dropdown.Option("–û—Ä–∞–Ω–∂–µ–≤–∞—è"),
            ft.dropdown.Option("–§–∏–æ–ª–µ—Ç–æ–≤–∞—è"),
            ft.dropdown.Option("–°–∏–Ω—è—è")
        ],
        on_change=lambda e: change_theme(e, page),
        width=150,
        bgcolor=ft.colors.WHITE,
    )

    def update_metrics():
        try:
            cpu_usage = get_cpu_usage()
            memory_usage = get_memory_usage()
            disk_usage = get_disk_usage()
            disk_io = get_disk_io()
            network_usage = get_network_usage()
            gpu_usage = get_gpu_usage()
            top_processes = get_top_processes()

            cpu_card.content.content.controls[1].value = f"–ó–∞–≥—Ä—É–∑–∫–∞ CPU üíª: {cpu_usage}%"
            memory_card.content.content.controls[1].value = "\n".join([f"{key}: {value}" for key, value in memory_usage.items()])
            disk_card.content.content.controls[1].value = tabulate(disk_usage, headers=['–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ', '–í—Å–µ–≥–æ üíø', '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è üìÇ', '–°–≤–æ–±–æ–¥–Ω–æ üóÑÔ∏è', '–ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è üìâ'], tablefmt="fancy_grid")
            disk_io_card.content.content.controls[1].value = "\n".join([f"{key}: {value}" for key, value in disk_io.items()])
            network_card.content.content.controls[1].value = "\n".join([f"{key}: {value}" for key, value in network_usage.items()])
            gpu_card.content.content.controls[1].value = tabulate(gpu_usage, headers=['ID', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–ó–∞–≥—Ä—É–∑–∫–∞', '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏', '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞'], tablefmt="fancy_grid") if gpu_usage else "GPU –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. üö´"
            processes_card.content.content.controls[1].value = tabulate(top_processes, headers=['PID', '–ù–∞–∑–≤–∞–Ω–∏–µ', 'CPU %', '–ü–∞–º—è—Ç—å %'], tablefmt="fancy_grid")

            page.update()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ—Ç—Ä–∏–∫: {e}")

    def change_theme(e, page):
        selected_theme = e.control.value
        theme_map = {
            "–°–≤–µ—Ç–ª–∞—è": "light",
            "–¢–µ–º–Ω–∞—è": "dark",
            "–û—Ä–∞–Ω–∂–µ–≤–∞—è": ft.Theme(color_scheme_seed=ft.colors.ORANGE),
            "–§–∏–æ–ª–µ—Ç–æ–≤–∞—è": ft.Theme(color_scheme_seed=ft.colors.PURPLE),
            "–°–∏–Ω—è—è": ft.Theme(color_scheme_seed=ft.colors.BLUE)
        }
        theme = theme_map.get(selected_theme, "light")
        if isinstance(theme, str):
            page.theme_mode = theme
        else:
            page.theme = theme
        page.update()

    def refresh_metrics(e):
        update_metrics()

    refresh_button = ft.FloatingActionButton(
        icon=ft.icons.REFRESH,
        on_click=refresh_metrics,
        bgcolor=ft.colors.BLUE
    )

    # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
    tabs = ft.Tabs(
        selected_index=0,
        tabs=[
            ft.Tab(text="CPU", content=cpu_card),
            ft.Tab(text="–ü–∞–º—è—Ç—å", content=memory_card),
            ft.Tab(text="–î–∏—Å–∫–∏", content=disk_card),
            ft.Tab(text="–î–∏—Å–∫ I/O", content=disk_io_card),
            ft.Tab(text="–°–µ—Ç—å", content=network_card),
            ft.Tab(text="GPU", content=gpu_card),
            ft.Tab(text="–ü—Ä–æ—Ü–µ—Å—Å—ã", content=processes_card),
            ft.Tab(text="–ì—Ä–∞—Ñ–∏–∫–∏", content=graph_card)
        ],
        expand=1
    )

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    buttons_container = ft.Stack(
        controls=[
            ft.Container(
                content=ft.Row(
                    [theme_dropdown, refresh_button],
                    alignment=ft.MainAxisAlignment.END
                ),
                alignment=ft.alignment.bottom_right,
                padding=ft.padding.only(right=20, bottom=20)
            )
        ],
        width=page.width,
        height=page.height
    )

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    page.controls.append(tabs)
    page.controls.append(buttons_container)

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
    def update_metrics_periodically():
        cpu_data = []
        memory_data = []
        while True:
            try:
                cpu_data.append(get_cpu_usage())
                memory_data.append(float(get_memory_usage()['–ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è üìä'].replace('%', '')))
                if len(cpu_data) > 60:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö
                    cpu_data.pop(0)
                    memory_data.pop(0)

                buf = plot_metrics(cpu_data, memory_data)
                graph_card.content.content.controls[1].src_base64 = base64.b64encode(buf.getvalue()).decode()
                buf.close()

                update_metrics()
                time.sleep(1)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ—Ç—Ä–∏–∫: {e}")

    threading.Thread(target=update_metrics_periodically, daemon=True).start()

ft.app(target=main)
